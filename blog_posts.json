{
    "posts": [
        {
            "post_date": "2023-09-02T14:00:00",
            "title": "Blog Post Title",
            "content": "The content of the blog post goes here."
        },
        {
            "post_date": "2023-09-03T14:00:00",
            "title": "Another Post",
            "content": "More content for the new blog post."
        },
        {
            "post_date": "2023-10-02T14:00:00",
            "title": "Automating Daily Blog Posts with GitHub Actions and Blogger API",
            "content": "<p>In this blog post, we'll explore a GitHub Actions workflow that automates the creation of daily blog posts using the Blogger API. This workflow allows you to schedule and publish blog posts at a specified time every day.</p>\n\n<h2>GitHub Actions Workflow</h2>\n\n<p>Let's dive into the GitHub Actions workflow defined in the <code>.github/workflows/daily-automation.yml</code> file.</p>\n\n<pre><code>\nname: Daily Automated Actions\non:\n  schedule:\n    - cron: '0 14 * * *'\n\njobs:\n  daily-run:\n    name: 'Runs daily'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 2\n      - run: git checkout HEAD^2\n        if: ${{ github.event_name == 'pull_request' }}\n      - name: Setup Python version 3.9\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n      - name: Automate blog posts\n        run: |\n          python run.py --credentials '${{ secrets.credentials }}' --json '${{ secrets.json }}' --repo '${{ secrets.repo }}'\n</code></pre>\n\n<h3>Workflow Steps:</h3>\n\n<ol>\n  <li><strong>Checkout Repository:</strong> The action checks out the repository code.</li>\n  <li><strong>Python Setup:</strong> It sets up the Python environment with version 3.9.</li>\n  <li><strong>Install Dependencies:</strong> Installs the required dependencies defined in <code>requirements.txt</code>.</li>\n  <li><strong>Automate Blog Posts:</strong> Runs the <code>run.py</code> script to automate the creation of blog posts using the specified credentials, JSON file, and GitHub repository.</li>\n</ol>\n\n<h2>Python Script (<code>run.py</code>)</h2>\n\n<p>Now, let's explore the Python script responsible for interacting with the Blogger API and creating blog posts.</p>\n\n<pre><code>\n# The content of run.py\n# ...\n\n# Example usage\nif __name__ == '__main__':\n    args = parse_args()\n\n    # Use the contents of the credentials file as a string\n    credentials_str = args.credentials\n\n    # Initialize the Blogger API client\n    blogger_service = get_blogger_service(credentials_str)\n\n    # Get the Blog ID\n    blog_id = get_blog_id(blogger_service)\n    if blog_id is None:\n        print('Unable to retrieve Blog ID. Exiting.')\n        exit(1)\n\n    # Read blog post information from JSON file on GitHub\n    github_repo = args.github_repo\n    json_file_path = args.json_file\n    blog_posts = read_json_file_from_github(github_repo, json_file_path)\n\n    if blog_posts is not None and 'posts' in blog_posts:\n        for post in blog_posts['posts']:\n            # ...\n            # Process and create blog posts based on the script logic\n            # ...\n</code></pre>\n\n<h3>Key Script Components:</h3>\n\n<ul>\n  <li><strong>Parsing Arguments:</strong> The script parses command-line arguments, including credentials, GitHub repository URL, and JSON file path.</li>\n  <li><strong>Blogger API Initialization:</strong> It initializes the Blogger API client using the provided credentials.</li>\n  <li><strong>Reading Blog Post Information:</strong> The script reads blog post information from a JSON file in the specified GitHub repository.</li>\n  <li><strong>Automating Post Creation:</strong> Based on the scheduled date and time, the script automates the creation of blog posts using the Blogger API.</li>\n</ul>\n\n<h2>Conclusion</h2>\n\n<p>With this GitHub Actions workflow and Python script, you can effortlessly schedule and automate your daily blog posts, streamlining your content creation process. Customize the workflow and script to fit your specific requirements and enjoy a more efficient and consistent blogging experience.</p>\n"
        }
    ]
}
